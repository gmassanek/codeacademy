"What are hashes and how do we use them?","Hashes are ruby datastructures that hold key, value pairs.  Unlike arrays, the key and the pair can be any ruby class.","## Create a new hash

Hash is a class, so all you have to do is call the new method to get a new one

```ruby
h = Hash.new
```

or, you can directly create one, by using the `{}` syntax

```ruby
h = {}
```
## Filling it up
You can put data into an hash directly in the declaration.  Though you can have any object as a key, more often than not, in ruby we use symbols as our keys

```ruby
h = {:name => 'Geoff', :gender => 'M', :age => 23}
```
(notice that hash value can be of different types).  You can also fill one by directly assigning a key like

```ruby
h = Hash.new
h[:name] = 'Geoff'
h[:gender] = 'M'
h[:age] = 23
puts h # => {:name => 'Geoff', :gender => 'M', :age => 23}
```
## Access hash data
The easiest way to access hash data is by its key, using the `[]` accessors.  Something like 

```ruby
name = my_hash[:name]
gender = my_hash[:gender]
height = my_hash[:height]
puts height # => nil #If a key doesn't exist yet, its value is nil
```",t,Hashes,"2011-10-08 23:45:38.668777","2011-10-11 12:35:45.292980"
"What are arrays and how do we use them?","Arrays are ruby datastructures that hold groups of items, accessed by ordered, integer keys.","## Create a new array

Array is a class, so all you have to do is call the new method to get a new array

```ruby
a = Array.new
```

or, you can directly create one, by using the `[]` syntax

```ruby
a = []
```
## Filling up an array
You can put data into an array directly in the declaration.

```ruby
a = [""Blue"", ""Green""]
```

or by directly accessing an index like

```ruby
a = Array.new
a[0] = ""Blue""
a[3] = ""Green""
puts a # => [""Blue"", nil, nil, ""Green""]
```
or, if you don't know (or don't care) how many things you have in there, but just want to add something, you can use `push` (or its alias `<<`)

```ruby
a = Array.new
a.push(""Blue"")
a << ""Green""
puts a # => [""Blue"", ""Green""]
```

## Access array data
The easiest way to access array data is by its index, using the `[]` accessors.  Something like 

```ruby
the_first_element = my_array[0]
the_ninth_element = my_array[8] #remember, array indexes start with 0
```
Let's do some ruby magic, though.  How about spicing it up with

```ruby
the_first_element = my_array.first
the_last_element = my_array.last
```
How does it figure out `.last`?  In C++/Java, it would run something like

```ruby
the_last_element = my_array[my_array.length - 1]
```
which you could still do here, but you could also just drop the `my_array.length` part, since it's pretty much assumed

```ruby
the_last_element = my_array[-1]
the_penultimate_element = my_array[-2]
```

## Other fun tricks
In irb, type `Array.methods` to see all methods you can call on an array, but here are some fun ones.

#### Sort
```ruby
a = [4,3,1,9]
a.sort # => [1,3,4,9]
b = [""Green"", ""Yellow"", ""Blue""]
b.sort # => [""Blue"", ""Green"", ""Yellow""]
```
To sort objects by one of their attributes, use the following syntax

```ruby
users = User.all.sort { |a,b| a.name <=> b.name }
```
#### Reverse

```ruby
a = [4,3,1,9]
a.reverse # => [9,1,3,4]
```
#### Include

```ruby
a = [4,3,1,9]
a.include? 3 # => true
a.include? 6 # => false
```",t,Arrays,"2011-10-08 23:47:08.727588","2011-10-12 22:44:31.815975"
"What are classes and how do we use them?","Classes can be seen as the ""blueprint"" of a real life object.  They define attributes and methods to interact with that object.","To create a class, use the keyword `class`.  By convention, class names should be capitalized. 

```ruby
class Person
end
```
That's not too much fun though.  Now, let's add some variables that a `Person` will usually have.  To do this, we define attributes by using `attr_acessor`:

```ruby
class Person

  attr_accessor :name, :age, gender

end
```
`attr_accessor` will create getter and setter methods, as well as create instance variables (`@name`, `@age`, and `@gender`) for each attribute.

We can also define methods within our classes that will interact in particular ways with our class' instance variables.

```ruby
class Person

  attr_accessor :name, :age, gender

  def of_legal_age?
    return if(@age >= 18)
  end

end
```

To create a class in your code, just call the `.new` method.  When `.new` is called, a special named method, `initialize` will be called to enable you to define what happens when a new instance is created.

```ruby
class Person

  attr_accessor :name, :age, gender

  def initialize(name, age, gender)
    @name = name
    @age = age
    @gender = gender
  end

end
```
Now you could make a call like 

```ruby
babe_ruth = Person.new('Babe', 145, 'M')
```

For more about the types of methods and how methods work, see http://codeacademy.rubeco.info/nodes/methods.",t,Classes,"2011-10-09 02:54:35.892526","2011-10-15 19:54:15.931604"
"When exactly do I need to use attr_accessor in my model? Does it have something to do with ActiveRecord?","","",f,Classes,"2011-10-10 16:12:46.085956","2011-10-10 16:12:46.097217"
"When using a :remote=>true form, how do you make sure the flash notices are still shown?","","",f,AJAX,"2011-10-10 19:24:44.565857","2011-10-10 19:24:44.574058"
"What are all the different HTTP methods (get, post, put, etc) and what is the difference between them all?","","",f,"HTTP Requests","2011-10-11 23:13:28.682321","2011-10-12 00:12:42.445478"
"During a request, what order are the MVC pieces called upon?","An HTTP request comes in and hits the routes, controller, model (sometimes), and then the view","## Routes
When a request comes in, rails will try to match it to one of the routes defined in config/routes.rb.  It will match both the url as well as the http method (for more on these see http://codeacademy.rubeco.info/nodes/http-requests/tutorials/6).  A routes.rb file like 

```ruby
get 'accounts/index'
put 'accounts/:id/update', :controller => 'accounts', :action => 'edit'
post 'accounts/create', :controller => 'accounts', :action => 'create'
```
will direct the application to particular methods within the AccountsController, depending on the URL and http method of the incoming request.

## Controllers
Once in the AccountsController, the action (or method) from the matched route will be executed.  The controller is responsible for gathering all the information that needs to be displayed for that particular request.  (more on controllers here http://codeacademy.rubeco.info/nodes/controllers).  Depending on what information that particular response requires, the application might have to take a trip down to the model layer.  For example, consider the following:

```ruby
class AccountsController < ApplicationController

  def create
    @account = Account.new(params[:account])
    if @account.save
      redirect_to account_path(@account), :notice => ""Account created""
    else
      render :action => 'new'
    end  
  end

end
```
At the `Account.new` and `@account.save` steps, rails has to interact with the Account model.  Once it makes it's trip down to model-land, it will come back and finish off executing the rest of the method.

## Models
Models will be able to interact with the data in an application.  This is usually through ActiveRecord and some database queries, though it doesn't have to go all the way to a database (more on models here http://codeacademy.rubeco.info/nodes/models).  Once the model has performed whichever actions it was asked for, it will return back up to the controller.

## Views
After the controller's action has run full through, it should have gathered all information required to display the result of the incoming request.  By convention, rails will look for a view to display within a folder matching the controller name and a name matching the action/method performed within that controller. (more on views here http://codeacademy.rubeco.info/nodes/views)

### Overriding the convention
In certain situations, you want you application to show another view.  In the above `create` method, either path will display a view other than create.html.erb.  If no `redirect_to` or `render` are used in your method, it will look for the view using the regular naming conventions. 

Once the view has been rendered, it is bundled up as an HTTP response returned to whoever was playing with your site.
",t,MVC,"2011-10-11 23:18:30.164392","2011-10-11 23:32:16.183200"